install.package(''Kern Smooth'')
install.package(Kern Smooth)
install.package('Kern Smooth')
install.packages('Kern Smooth')
install.packages('KernSmooth')
Kernsmooth
KernSmooth
KernSmooth()
library(KernSmooth)
clear
clear()
clr()
clr
install.packages('swirl')
install.packages('swirl')
install.packages('swirl')
library(swirl)
library('swirl')
library("swirl")
install.packages('swirl')
library(swirl)
swirl()
install.packages('codetools')
install.packages('swirl')
library(swirl)
swirl()
5+7
x<-5+7
x
y<-x-3
y
z<- c(1.1,9,3.14)
bye()
exit()
x
x=2
x
mk<-function(x=numeric()){
set<-function(y){
x<<-y
}
set
}
x$set(1)
x$set()
set(1)
mk(x)(1)
x
mk(x)
(mk(x))(3)
x
(mk(a))(3)
a
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector(x)
makeVector(a)(1)
makeVector(a)(c(1))
makeVector(a)$set(1)
a
makeVector(a)$get()
makeVector(a)(c(1))
makeVector(a)$set(1)
makeVector(a)$get()
makeVector()$get()
makeVector()$set(1)
makeVector()$get()
a=12
makeVector(a)$set(1)
makeVector()$get()
makeVector(12)$set(1)
makeVector(12)$get()
makeVector(12)
makeVector(12)$set()
makeVector(12)$set(3)
a=makeVector(12)$set(3)
a$get()
a=makeVector()$set(3)
makeVector()$set(3)
makeVector()$get()
makeVector()$setmean(3)
makeVector()$getmean()
makeVector(6)$setmean(3)
makeVector(6)$getmean()
mk<-function(x=numeric()){
set<-function(y){
x<<-y
}
get<-function() x
}
mk(2)
x$setmean(3)
x=2
x$setmean(3)
x=makeVector(6)
x$setmean(3)
x$getmean()
x$set(3)
x$get()
x=[1 0
?array
x=array(c(1,0,0,1), dim=2)
x
makeCacheMatrix<-function(x=matrix()){
set<-function(y){
x<<-y
}
calc_inverse<-function(){
solve(x)
}
list(set=set, inv=calc_inverse)
}
M=matrix(c(2,0,0,2),2,2)
M
Mat=makeCacheMatric(M)
Mat=makeCacheMatrix(M)
Mat$inv
Mat$inv()
Mat
Mat(M)
M
x=matrix()
x
is.na(x)
makeCacheMatrix<-function(x = matrix()) {
inv<-matrix()
set <- function(y) {
x <<- y
inv<<-matrix()
}
get <- function() x
set_inv <- function(inverse) inv <<- inverse
get_inv <- function() inv
list(set = set, get = get,
set_inv = set_inv,
get_inv = get_inv)
}
cachemean <- function(x, ...) {
inv <- x$get_inv()
if(!is.na(inv)) {
message("getting cached inverse")
return(inv)
}
Matrix <- x$get()
Matrix_inverse <- solve(Matrix)
x$set_inv(Matrix_inverse)
Matrix_inverse
}
x=makeCacheMatric(M)
x=makeCacheMatrix(M)
x$get_inv()
x$get_inv
cachemean(x)
x$get_inv
x$get_inv()
M=matrix(4)
x=makeCacheMatrix(M)
x$get_inv()
x=makeCacheMatrix(M)
cachemean(x)
x$get_inv()
M=matrix(5)
x$set(M)
x$get_inv()
cachemean(x)
x$get_inv()
library(datasets)
data(iris)
?iris
x=iris
debig(ls)
debug(ls)
ls
x
s<-split(x,'Species')
q
x<-rbind(x,c(1,2,3))
x
x
x<-data.frame()
#x<-rbind(x,c(1,2,3))
x
x
x<-data.frame()
x<-rbind(x,c(1,2,3))
rnames(x)<-c('a','b','c')
x
x<-data.frame()
x<-rbind(x,c(1,2,3))
cnames(x)<-c('a','b','c')
x
x<-data.frame()
x<-rbind(x,c(1,2,3))
colnames(x)<-c('a','b','c')
x
x<-data.frame()
x<-rbind(x,c(1,2,3))
colnames(x)<-c('a','b','c')
y<-data.frame()
y<-rbind(y,c(1,2,3))
colnames(y)<-c('aa','bb','cc')
z<-rbind(x,y)
z
x=read.csv('Testreviews.csv')
x=read.csv('Testreveiws.csv')
setwd("~/Dropbox/Movies")
x=read.csv('Testreveiws.csv')
x=read.csv('Testreveiws.csv')
x=read.csv('Testreviews.csv')
x
x[is.na(x)]
x
x[1:,]
x[1:]
x[1:
Q
q
x[1,1]
x[1:,1]
?data.frame
x(1:)
x[1:]
x[1:,]
x[1,]
x[1:,]
x[-1,]
x[,1]
x[,-1]
x<-x[,-1]
x
x[is.na(x)]
?is.na
is.na(x)
x$is.na(x)
x[[is.na(x)]]
x[is.na(x)]
x[!is.na(x)]
x[is.na(x)]<-0
x
x
x=read.csv('Testreviews.csv')
y=x[,-1]
y
y[is.na(y)]
is.na(y)<-0
y[is.na(y)]<-0
y
y=x[,-1]
y[!is.na(y)]<-0
y
y
y=x[,-1]
y
y[!is.na(y)]<-1
y[is.na(y)]<-0
y
write.csv(y,'bladibla')
?write.csv
write.csv(y,'bladibla',row.names=false,col.names=false)
write.csv(y,'bladibla',row.names=FALSE,col.names=FALSE)
write.csv(y,'bladibla',row.names=FALSE,col.names=FALSE)
y
names(y)<-c()
y
write.csv(y,'bladibla',row.names=FALSE,col.names=FALSE)
write.csv(y,'RMatlab',row.names=FALSE,col.names=FALSE)
write.csv(y,'YMatlab',row.names=FALSE,col.names=FALSE)
write.csv(z,'YMatlab',row.names=FALSE,col.names=FALSE)
z<-x[,-1]
z[is.na(y)]<-0
write.csv(y,'RMatlab',row.names=FALSE,col.names=FALSE)
write.csv(z,'iYMatlab',row.names=FALSE,col.names=FALSE)
write.csv(z,'YMatlab',row.names=FALSE,col.names=FALSE)
x=read.csv('Testreviews.csv')
x<-x[,-1]
y<-x[,-1]
y[!is.na(y)]<-1
y[is.na(y)]<-0
names(y)<-c()
z<-x[,-1]
z[is.na(y)]<-0
names(z)<-c()
write.csv(y,'RMatlab',row.names=FALSE,col.names=FALSE)
write.csv(z,'YMatlab',row.names=FALSE,col.names=FALSE)
x=read.csv('Testreviews.csv')
x<-x[,-1]
y<-x[,-1]
y[!is.na(y)]<-1
y[is.na(y)]<-0
names(y)<-c()
z<-x[,-1]
z[is.na(z)]<-0
names(z)<-c()
write.csv(y,'RMatlab',row.names=FALSE,col.names=FALSE)
write.csv(z,'YMatlab',row.names=FALSE,col.names=FALSE)
x=read.csv('Testreviews.csv')
y<-x[,-1]
y[!is.na(y)]<-1
y[is.na(y)]<-0
names(y)<-c()
z<-x[,-1]
z[is.na(z)]<-0
names(z)<-c()
write.csv(y,'RMatlab',row.names=FALSE,col.names=FALSE)
write.csv(z,'YMatlab',row.names=FALSE,col.names=FALSE)
#This r file cleans the reshaped movie data to files Matlab can read for the collabarative
#filtration algorithm.
x=read.csv('Testreviews.csv')
y<-x[,-1]
# Get rid of the names of reviewers
y[!is.na(y)]<-1
y[is.na(y)]<-0
#Set 1 or 0 by not na or na
names(y)<-c()
# Get rid of movie titles. Stored elsewhere
write.csv(y,'RMatlab.csv',row.names=FALSE,col.names=FALSE)# Write it to a text MATlab can read from
#R(i,j) is wether the ith person watched the jth movie.
z<-x[,-1]
z[is.na(z)]<-0
# Set 'na's to 0 because entries have to be numeric. They won't figure into the calculation
names(z)<-c()
write.csv(z,'YMatlab.csv',row.names=FALSE,col.names=FALSE)
#Y(i,j) is the rating the ith person gave the jth movie
#Reshapes a long skinny text of reviews into a wide table with movies as columns
#'myfile.txt' is the skinny table. Coulumn names: Name, Freshness, Movie
x<-read.csv('myfile.txt')
#names(x)<-c('Name','Freshness','Movie')
y<-reshape(x,direction='wide',timevar='Movie',idvar='Name')
write.table(y,file='reviewfile.txt',sep=',')
#Reshapes a long skinny text of reviews into a wide table with movies as columns
#'myfile.txt' is the skinny table. Coulumn names: Name, Freshness, Movie
x<-read.csv('myfile.txt')
names(x)<-c('Name','Freshness','Movie')
y<-reshape(x,direction='wide',timevar='Movie',idvar='Name')
write.table(y,file='reviewfile.txt',sep=',')
#Reshapes a long skinny text of reviews into a wide table with movies as columns
#'myfile.txt' is the skinny table. Coulumn names: Name, Freshness, Movie
x<-read.csv('myfile.txt')
names(x)<-c('Name','Freshness','Movie')
y<-reshape(x,direction='wide',timevar='Movie',idvar='Name')
write.table(y,file='reviewfile.txt',sep=',')
#This r file cleans the reshaped movie data to files Matlab can read for the collabarative
#filtration algorithm.
#x=read.csv('Testreviews.csv')
x=read.csv('reviewfile.txt')
y<-x[,-1]
# Get rid of the names of reviewers
y[!is.na(y)]<-1
y[is.na(y)]<-0
#Set 1 or 0 by not na or na
names(y)<-c()
# Get rid of movie titles. Stored elsewhere
write.csv(y,'RMatlab.csv',row.names=FALSE,col.names=FALSE)# Write it to a text MATlab can read from
#R(i,j) is wether the ith person watched the jth movie.
z<-x[,-1]
z[is.na(z)]<-0
# Set 'na's to 0 because entries have to be numeric. They won't figure into the calculation
names(z)<-c()
write.csv(z,'YMatlab.csv',row.names=FALSE,col.names=FALSE)
#Y(i,j) is the rating the ith person gave the jth movie
# Don't mind col.names error msg above.
#x=read.csv('reviewfile.txt')
#This r file cleans the reshaped movie data to files Matlab can read for the collabarative
#filtration algorithm.
x=read.csv('Testreviews.csv')
#x=read.csv('reviewfile.txt')
y<-x[,-1]
# Get rid of the names of reviewers
y[!is.na(y)]<-1
y[is.na(y)]<-0
#Set 1 or 0 by not na or na
names(y)<-c()
# Get rid of movie titles. Stored elsewhere
write.csv(y,'RMatlab.csv',row.names=FALSE,col.names=FALSE)# Write it to a text MATlab can read from
#R(i,j) is wether the ith person watched the jth movie.
z<-x[,-1]
z[is.na(z)]<-0
# Set 'na's to 0 because entries have to be numeric. They won't figure into the calculation
names(z)<-c()
write.csv(z,'YMatlab.csv',row.names=FALSE,col.names=FALSE)
#Y(i,j) is the rating the ith person gave the jth movie
# Don't mind col.names error msg above.
